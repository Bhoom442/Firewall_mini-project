import tkinter as tk
from tkinter import ttk, messagebox
import random
import threading
import time
from collections import Counter
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt

# Initial firewall rules
firewall_rules = {
    "block_ports": [21, 53, 8801],
    "block_protocols": ["UDP"],
    "allow_protocols": ["TCP"]
}

# Stats
packet_stats = {"allowed": 0, "blocked": 0}

# GUI Setup
root = tk.Tk()
root.title("Interactive Firewall Simulator")
root.geometry("750x550")
root.config(bg="#f7f7f7")

# Packet log area
log_text = tk.Text(root, height=15, width=80, state="normal")
log_text.pack(pady=10)

# ---------------- Functions ----------------
def log_message(msg, color="black"):
    log_text.insert(tk.END, msg + "\n", color)
    log_text.tag_configure("red", foreground="red")
    log_text.tag_configure("green", foreground="green")
    log_text.tag_configure("orange", foreground="orange")
    log_text.see(tk.END)

def check_packet(protocol, port):
    """Simulate firewall decision"""
    if protocol in firewall_rules["block_protocols"]:
        packet_stats["blocked"] += 1
        return f"‚ùå BLOCKED: {protocol} traffic is blocked", "red"
    elif port in firewall_rules["block_ports"]:
        packet_stats["blocked"] += 1
        return f"‚ùå BLOCKED: Port {port} is blocked", "red"
    elif protocol in firewall_rules["allow_protocols"]:
        packet_stats["allowed"] += 1
        return f"‚úÖ ALLOWED: {protocol} traffic on port {port}", "green"
    else:
        packet_stats["blocked"] += 1
        return f"‚ö†Ô∏è Not explicitly allowed ‚Äî Blocked by default", "orange"

def simulate_packets():
    """Generate random packets continuously"""
    while running.get():
        protocol = random.choice(["TCP", "UDP"])
        port = random.randint(20, 9000)
        msg, color = check_packet(protocol, port)
        log_message(f"Packet: {protocol} on port {port} ‚Üí {msg}", color)
        update_chart()
        time.sleep(1.5)

def start_simulation():
    if not running.get():
        running.set(True)
        threading.Thread(target=simulate_packets, daemon=True).start()

def stop_simulation():
    running.set(False)

def add_rule():
    """Add a new block rule"""
    choice = rule_type_var.get()
    value = rule_value_entry.get().strip()
    
    if choice == "Port":
        if not value.isdigit():
            messagebox.showerror("Error", "Please enter a numeric port!")
            return
        value = int(value)
        if value not in firewall_rules["block_ports"]:
            firewall_rules["block_ports"].append(value)
            log_message(f"üõë Rule Added: Block Port {value}", "orange")
    elif choice == "Protocol":
        value = value.upper()
        if value not in firewall_rules["block_protocols"]:
            firewall_rules["block_protocols"].append(value)
            log_message(f"üõë Rule Added: Block Protocol {value}", "orange")
    update_rules_display()

def remove_rule():
    """Remove a block rule"""
    choice = rule_type_var.get()
    value = rule_value_entry.get().strip()
    
    if choice == "Port":
        if value.isdigit():
            value = int(value)
            if value in firewall_rules["block_ports"]:
                firewall_rules["block_ports"].remove(value)
                log_message(f"‚úÖ Rule Removed: Port {value} unblocked", "green")
    elif choice == "Protocol":
        value = value.upper()
        if value in firewall_rules["block_protocols"]:
            firewall_rules["block_protocols"].remove(value)
            log_message(f"‚úÖ Rule Removed: Protocol {value} unblocked", "green")
    update_rules_display()

def update_rules_display():
    rules_text.delete("1.0", tk.END)
    rules_text.insert(tk.END, f"Blocked Ports: {firewall_rules['block_ports']}\n")
    rules_text.insert(tk.END, f"Blocked Protocols: {firewall_rules['block_protocols']}\n")
    rules_text.insert(tk.END, f"Allowed Protocols: {firewall_rules['allow_protocols']}\n")

def update_chart():
    """Update blocked vs allowed chart"""
    chart_ax.clear()
    chart_ax.bar(["Allowed", "Blocked"], [packet_stats["allowed"], packet_stats["blocked"]])
    chart_ax.set_title("Packet Traffic Stats")
    chart_ax.set_ylabel("Count")
    chart_canvas.draw()

# ---------------- Controls ----------------
btn_frame = tk.Frame(root, bg="#f7f7f7")
btn_frame.pack(pady=5)

tk.Button(btn_frame, text="‚ñ∂ Start Simulation", command=start_simulation, bg="#4CAF50", fg="white").grid(row=0, column=0, padx=5)
tk.Button(btn_frame, text="‚è∏ Stop Simulation", command=stop_simulation, bg="#f44336", fg="white").grid(row=0, column=1, padx=5)

# Rule management
rule_frame = tk.LabelFrame(root, text="Firewall Rules", bg="#f7f7f7", padx=10, pady=10)
rule_frame.pack(pady=10)

rule_type_var = tk.StringVar(value="Port")
ttk.Combobox(rule_frame, textvariable=rule_type_var, values=["Port", "Protocol"], width=10, state="readonly").grid(row=0, column=0, padx=5)

rule_value_entry = tk.Entry(rule_frame, width=15)
rule_value_entry.grid(row=0, column=1, padx=5)

tk.Button(rule_frame, text="Add Rule", command=add_rule, bg="#2196F3", fg="white").grid(row=0, column=2, padx=5)
tk.Button(rule_frame, text="Remove Rule", command=remove_rule, bg="#FF9800", fg="white").grid(row=0, column=3, padx=5)

rules_text = tk.Text(rule_frame, height=5, width=60)
rules_text.grid(row=1, column=0, columnspan=4, pady=5)

update_rules_display()

# Chart
fig, chart_ax = plt.subplots(figsize=(4, 3))
chart_canvas = FigureCanvasTkAgg(fig, master=root)
chart_canvas.get_tk_widget().pack(pady=10)
update_chart()

# Running state
running = tk.BooleanVar(value=False)

# Run GUI
root.mainloop()
